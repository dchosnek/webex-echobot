AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  TOKEN:
    Type: String
    NoEcho: true
    Description: Webex TOKEN for the bot

Resources:
  ExecRcvMsg:
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "LambdaExecutionPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"

  LambdaRcvMsg:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "index.handler"
      Role: !GetAtt ExecRcvMsg.Arn
      Runtime: "nodejs20.x"
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            return {
              statusCode: 200,
              body: JSON.stringify('Hello from Lambda!'),
            };
          };
      Environment:
        Variables:
          TOKEN: !Ref TOKEN
      Timeout: 10

  FuncUrlPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunctionUrl"
      FunctionName: !Ref LambdaRcvMsg
      Principal: "*"
      FunctionUrlAuthType: "NONE"
      
  FuncUrl:
    Type: "AWS::Lambda::Url"
    Properties:
      AuthType: NONE
      TargetFunctionArn: !GetAtt LambdaRcvMsg.Arn

  LogRetention:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaRcvMsg}"
      RetentionInDays: 7

Outputs:
  LambdaFunctionURL:
    Description: "URL for the Lambda function"
    Value: !GetAtt FuncUrl.FunctionUrl
